'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactCreateRef = require('react-create-ref');

var _reactCreateRef2 = _interopRequireDefault(_reactCreateRef);

var _throttle = require('lodash/throttle');

var _throttle2 = _interopRequireDefault(_throttle);

var _dom = require('./utility/dom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OnScrollTo = (_temp2 = _class = function (_React$Component) {
	_inherits(OnScrollTo, _React$Component);

	function OnScrollTo() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, OnScrollTo);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = OnScrollTo.__proto__ || Object.getPrototypeOf(OnScrollTo)).call.apply(_ref, [this].concat(args))), _this), _this.node = (0, _reactCreateRef2.default)(), _this.isActive = false, _this.isVisible = true, _this.activate = function () {
			window.addEventListener('scroll', _this.onScrollThrottled);
			window.addEventListener('resize', _this.onScrollThrottled);
			window.addEventListener('mousewheel', _this.onMouseWheelThrottled);
			_this.isActive = true;
			// The element may be initially visible.
			_this.onScrollThrottled();
		}, _this.onMouseWheel = function (event) {
			if (event.deltaY === 1) {
				event.preventDefault();
			}
		}, _this.onScroll = function () {
			var _this$props = _this.props,
			    onScrollTo = _this$props.onScrollTo,
			    onScrollPast = _this$props.onScrollPast;

			var previouslyVisible = _this.isVisible;
			_this.isVisible = _this.calculateIsVisible();
			if (previouslyVisible !== _this.isVisible) {
				var promise = void 0;
				if (_this.isVisible) {
					if (onScrollTo) {
						promise = onScrollTo();
					}
				} else {
					if (onScrollPast) {
						promise = onScrollPast();
					}
				}
				_this.deactivate();
				if (promise && !_this.usesValue()) {
					promise.then(_this.activate, _this.activate);
				}
			}
		}, _this.onMouseWheelThrottled = (0, _throttle2.default)(_this.onMouseWheel, 150), _this.onScrollThrottled = (0, _throttle2.default)(_this.onScroll, 150), _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(OnScrollTo, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			this.activate();
		}
	}, {
		key: 'componentDidUpdate',
		value: function componentDidUpdate(prevProps) {
			if (this.usesValue()) {
				if (this.props.value !== prevProps.value) {
					if (!this.isActive) {
						this.activate();
					} else {
						console.warn('[react-responsive-ui] `<OnScrollTo/>` `value` property changed while it being "active": that\'s not supposed to happen');
					}
				}
			}
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			this.deactivate();
		}
	}, {
		key: 'usesValue',
		value: function usesValue() {
			var value = this.props.value;

			return value !== undefined;
		}
	}, {
		key: 'deactivate',
		value: function deactivate() {
			window.removeEventListener('scroll', this.onScrollThrottled);
			window.removeEventListener('resize', this.onScrollThrottled);
			window.removeEventListener('mousewheel', this.onMouseWheelThrottled);
			this.isActive = false;
		}

		// Prevents some hypothetical Chrome scroll bug:
		// https://stackoverflow.com/questions/47524205/random-high-content-download-time-in-chrome/47684257#47684257

	}, {
		key: 'calculateIsVisible',
		value: function calculateIsVisible() {
			var triggerDistance = this.props.triggerDistance;

			var offset = (0, _dom.getOffset)(this.scrollComponent);
			var topEdge = offset.top;
			var bottomEdge = offset.top + offset.height;
			var screenTopEdge = window.pageYOffset;
			var screenBottomEdge = window.pageYOffset + window.innerHeight;
			return topEdge < screenBottomEdge + triggerDistance && bottomEdge > screenTopEdge - triggerDistance;
		}
	}, {
		key: 'render',
		value: function render() {
			var _props = this.props,
			    children = _props.children,
			    onScrollTo = _props.onScrollTo,
			    onScrollPast = _props.onScrollPast,
			    offset = _props.offset,
			    value = _props.value,
			    rest = _objectWithoutProperties(_props, ['children', 'onScrollTo', 'onScrollPast', 'offset', 'value']);

			return _react2.default.createElement(
				'div',
				_extends({}, rest, { ref: this.node }),
				children
			);
		}
	}]);

	return OnScrollTo;
}(_react2.default.Component), _class.propTypes = {
	children: _propTypes2.default.node.isRequired,
	triggerDistance: _propTypes2.default.number.isRequired,
	onScrollTo: _propTypes2.default.func,
	onScrollPast: _propTypes2.default.func,
	// (optional)
	// Is used when `onScrollXxx` doesn't return a `Promise`.
	value: _propTypes2.default.any
}, _class.defaultProps = {
	triggerDistance: 0
}, _temp2);
exports.default = OnScrollTo;
//# sourceMappingURL=OnScrollTo.js.map