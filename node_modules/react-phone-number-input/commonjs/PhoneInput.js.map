{"version":3,"sources":["../source/PhoneInput.js"],"names":["PureComponent","Component","PhoneNumberInput","props","value","country","countries","countryOptions","labels","international","metadata","validateCountry","validateCountries","validateCountryOptions","phoneNumber","pre_selected_country","filter","_","state","country_select_options","generate_country_select_options","parsed_input","generateParsedInput","onCountryChange","selectedCountry","prevProps","prevState","name","disabled","disablePhoneInput","autoComplete","countrySelectTabIndex","showCountrySelect","style","className","inputClassName","getInputClassName","countrySelectProperties","error","indicateInvalid","CountrySelectComponent","countrySelectComponent","InputComponent","inputComponent","ext","flags","flagComponent","flagsPath","internationalIcon","displayInitialValueAsLocalNumber","limitMaxLength","phoneNumberInputProps","hidePhoneInputField","isFocused","_countrySelectProps","key","hasOwnProperty","storeCountrySelectInstance","undefined","_onFocus","_onBlur","focus","storePhoneNumberInputInstance","onChange","onFocus","onBlur","onPhoneNumberKeyDown","invalid","cloneElement","event","parseExtDigits","hasUserSelectedACountry","old_default_country","old_value","new_default_country","new_value","new_state","indexOf","propTypes","string","func","isRequired","onKeyDown","bool","arrayOf","objectOf","number","object","node","defaultProps","new_country","old_parsed_input","old_country","new_parsed_input","setState","_input","input","_event","target","stopPropagation","preventDefault","hide","number_input","country_select","CountrySelectOptionIcon","createCountrySelectOptionIconComponent","transformCountryOptions","map","label","icon","FlagComponent","InternationalIcon","options","transform","optionsOnTop","optionsOnBottom","appendTo","element","push","divider","index","option","splice","concat","throwCountryNotFound","Error"],"mappings":"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","file":"PhoneInput.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { polyfill as reactLifecyclesCompat } from 'react-lifecycles-compat'\r\nimport { parseDigits } from 'libphonenumber-js/core'\r\n\r\n// import InputSmart from './InputSmart'\r\nimport InputBasic from './InputBasic'\r\n\r\nimport FlagComponent from './Flag'\r\n\r\nimport\r\n{\r\n\tmetadata as metadataPropType,\r\n\tlabels as labelsPropType\r\n}\r\nfrom './PropTypes'\r\n\r\nimport\r\n{\r\n\tgetPreSelectedCountry,\r\n\tgetCountrySelectOptions,\r\n\tparsePhoneNumber,\r\n\tgenerateNationalNumberDigits,\r\n\tmigrateParsedInputForNewCountry,\r\n\tgetCountryForPartialE164Number,\r\n\tparseInput,\r\n\te164\r\n}\r\nfrom './input-control'\r\n\r\nimport { getCountryCodes } from './countries'\r\n\r\n// `PureComponent` is only available in React >= 15.3.0.\r\nconst PureComponent = React.PureComponent || React.Component\r\n\r\n@reactLifecyclesCompat\r\nexport default class PhoneNumberInput extends PureComponent\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\t/**\r\n\t\t * Phone number in `E.164` format.\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `\"+12223333333\"`\r\n\t\t */\r\n\t\tvalue : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * Updates the `value` as the user inputs the phone number.\r\n\t\t */\r\n\t\tonChange : PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Toggles the `--focus` CSS class.\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tonFocus : PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * `onBlur` is usually passed by `redux-form`.\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tonBlur : PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * `onKeyDown` handler (e.g. to handle Enter key press).\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tonKeyDown : PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * Disables both the phone number `<input/>`\r\n\t\t * and the country `<select/>`.\r\n\t\t */\r\n\t\t// (is `false` by default)\r\n\t\tdisabled : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Sets `autoComplete` property for phone number `<input/>`.\r\n\t\t *\r\n\t\t * Web browser's \"autocomplete\" feature\r\n\t\t * remembers the phone number being input\r\n\t\t * and can also autofill the `<input/>`\r\n\t\t * with previously remembered phone numbers.\r\n\t\t *\r\n\t\t * https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\r\n\t\t *\r\n\t\t * For example, can be used to turn it off:\r\n\t\t *\r\n\t\t * \"So when should you use `autocomplete=\"off\"`?\r\n\t\t *  One example is when you've implemented your own version\r\n\t\t *  of autocomplete for search. Another example is any form field\r\n\t\t *  where users will input and submit different kinds of information\r\n\t\t *  where it would not be useful to have the browser remember\r\n\t\t *  what was submitted previously\".\r\n\t\t */\r\n\t\t// (is `\"tel\"` by default)\r\n\t\tautoComplete : PropTypes.string.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Set to `true` to show the initial `value` in\r\n\t\t * \"national\" format rather than \"international\".\r\n\t\t *\r\n\t\t * For example, if this flag is set to `true`\r\n\t\t * and the initial `value=\"+12133734253\"` is passed\r\n\t\t * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n\t\t *\r\n\t\t * By default, this flag is set to `false`,\r\n\t\t * meaning that if the initial `value=\"+12133734253\"` is passed\r\n\t\t * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n\t\t *\r\n\t\t * The reason for such default behaviour is that\r\n\t\t * the newer generation grows up when there are no stationary phones\r\n\t\t * and therefore everyone inputs phone numbers in international format\r\n\t\t * in their smartphones so people gradually get more accustomed to\r\n\t\t * writing phone numbers in international format rather than in local format.\r\n\t\t * Future people won't be using \"national\" format, only \"international\".\r\n\t\t */\r\n\t\t// (is `false` by default)\r\n\t\tdisplayInitialValueAsLocalNumber : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * The country to be selected by default.\r\n\t\t * For example, can be set after a GeoIP lookup.\r\n\t\t *\r\n\t\t * Example: `\"US\"`.\r\n\t\t */\r\n\t\t// A two-letter country code (\"ISO 3166-1 alpha-2\").\r\n\t\tcountry : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * If specified, only these countries will be available for selection.\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `[\"RU\", \"UA\", \"KZ\"]`\r\n\t\t */\r\n\t\tcountries : PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t\t/**\r\n\t\t * Custom country `<select/>` option names.\r\n\t\t * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n\t\t *\r\n\t\t * See the `locales` directory for examples.\r\n\t\t */\r\n\t\tlabels : labelsPropType.isRequired,\r\n\r\n\t\t/**\r\n\t\t * The base URL path for country flag icons.\r\n\t\t * By default it loads country flag icons from\r\n\t\t * `flag-icon-css` repo github pages website.\r\n\t\t * I imagine someone might want to download\r\n\t\t * those country flag icons and host them\r\n\t\t * on their own servers instead.\r\n\t\t */\r\n\t\tflagsPath : PropTypes.string.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Custom country flag icon components.\r\n\t\t * These flags replace the default ones.\r\n\t\t *\r\n\t\t * The shape is an object where keys are country codes\r\n\t\t * and values are flag icon components.\r\n\t\t * Flag icon components receive the same properties\r\n\t\t * as `flagComponent` (see below).\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `{ \"RU\": () => <img src=\"...\"/> }`\r\n\t\t *\r\n\t\t * Can be used to replace the default flags\r\n\t\t * with custom ones for certain (or all) countries.\r\n\t\t *\r\n\t\t * Can also be used to bundle `<svg/>` flags instead of `<img/>`s:\r\n\t\t *\r\n\t\t * By default flag icons are inserted as `<img/>`s\r\n\t\t * with their `src` pointed to `flag-icon-css` repo github pages website.\r\n\t\t *\r\n\t\t * There might be some cases\r\n\t\t * (e.g. a standalone \"native\" app, or an \"intranet\" web application)\r\n\t\t * when including the full set of `<svg/>` country flags (3 megabytes)\r\n\t\t * is more appropriate than downloading them individually at runtime only if needed.\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `// Uses <svg/> flags (3 megabytes):`\r\n\t\t *\r\n\t\t * `import flags from 'react-phone-number-input/flags'`\r\n\t\t *\r\n\t\t * `import PhoneInput from 'react-phone-number-input'`\r\n\t\t *\r\n\t\t * `<PhoneInput flags={flags} .../>`\r\n\t\t */\r\n\t\tflags : PropTypes.objectOf(PropTypes.func),\r\n\r\n\t\t/**\r\n\t\t * Country flag icon component.\r\n\t\t *\r\n\t\t * Takes properties:\r\n\t\t *\r\n\t\t * * country : string — The country code.\r\n\t\t * * flagsPath : string — The `flagsPath` property (see above).\r\n\t\t * * flags : object — The `flags` property (see above).\r\n\t\t */\r\n\t\tflagComponent : PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to drop the \"International\" option from country `<select/>`.\r\n\t\t */\r\n\t\tinternational : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Custom \"International\" country `<select/>` option icon.\r\n\t\t */\r\n\t\tinternationalIcon : PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to hide country `<select/>`.\r\n\t\t */\r\n\t\t// (is `true` by default)\r\n\t\tshowCountrySelect : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * HTML `tabindex` attribute for country `<select/>`.\r\n\t\t */\r\n\t\tcountrySelectTabIndex : PropTypes.number,\r\n\r\n\t\t/**\r\n\t\t * Can be used to place some countries on top of the list of country `<select/>` options.\r\n\t\t *\r\n\t\t * * `\"|\"` — inserts a separator.\r\n\t\t * * `\"...\"` — means \"the rest of the countries\" (can be omitted).\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n\t\t */\r\n\t\tcountryOptions : PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t\t/**\r\n\t\t * `<Phone/>` component CSS style object.\r\n\t\t */\r\n\t\tstyle : PropTypes.object,\r\n\r\n\t\t/**\r\n\t\t * `<Phone/>` component CSS class.\r\n\t\t */\r\n\t\tclassName : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * Phone number `<input/>` CSS class.\r\n\t\t */\r\n\t\tinputClassName : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * Returns phone number `<input/>` CSS class string.\r\n\t\t * Receives an object of shape `{ disabled : boolean?, invalid : boolean? }`.\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tgetInputClassName : PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * Country `<select/>` component.\r\n\t\t *\r\n\t\t * Receives properties:\r\n\t\t *\r\n\t\t * * `name : string?` — HTML `name` attribute.\r\n\t\t * * `value : string?` — The currently selected country code.\r\n\t\t * * `onChange(value : string?)` — Updates the `value`.\r\n\t\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t\t * * `options : object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value : string?, label : string, icon : React.Component }`.\r\n\t\t * * `disabled : boolean?` — HTML `disabled` attribute.\r\n\t\t * * `tabIndex : (number|string)?` — HTML `tabIndex` attribute.\r\n\t\t * * `className : string` — CSS class name.\r\n\t\t */\r\n\t\t//\r\n\t\t// (deprecated)\r\n\t\t// * `hidePhoneInputField(hide : boolean)` — Can be called to show/hide phone input field. Takes `hide : boolean` argument. E.g. `react-responsive-ui` `<Select/>` uses this to hide phone number input when country select is expanded.\r\n\t\t// * `focusPhoneInputField()` — Can be called to manually focus phone input field. E.g. `react-responsive-ui` `<Select/>` uses this to focus phone number input after country selection in a timeout (after the phone input field is no longer hidden).\r\n\t\t//\r\n\t\tcountrySelectComponent : PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Phone number `<input/>` component.\r\n\t\t *\r\n\t\t * Receives properties:\r\n\t\t *\r\n\t\t * * `value : string` — The parsed phone number. E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t\t * * `onChange(value? : string)` — Updates the `value`.\r\n\t\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t\t * * `country : string?` — The currently selected country. `undefined` means \"International\" (no country selected).\r\n\t\t * * `metadata : object` — `libphonenumber-js` metadata.\r\n\t\t * * All other properties should be passed through to the underlying `<input/>`.\r\n\t\t *\r\n\t\t * Must also implement `.focus()` method.\r\n\t\t */\r\n\t\tinputComponent : PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to use `inputComponent={InputBasic}`\r\n\t\t * instead of `input-format`'s `<ReactInput/>`.\r\n\t\t * Is `false` by default.\r\n\t\t */\r\n\t\t// smartCaret : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Phone number extension `<input/>` element.\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t *\t`ext={<input value={...} onChange={...}/>}`\r\n\t\t */\r\n\t\text : PropTypes.node,\r\n\r\n\t\t/**\r\n\t\t * If set to `true` the phone number input will get trimmed\r\n\t\t * if it exceeds the maximum length for the country.\r\n\t\t */\r\n\t\tlimitMaxLength : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * An error message to show below the phone number `<input/>`. For example, `\"Required\"`.\r\n\t\t */\r\n\t\terror : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * The `error` is shown only when `indicateInvalid` is `true`.\r\n\t\t * (which is the default).\r\n\t\t * @deprecated\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tindicateInvalid : PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t *\r\n\t\t * Can be used to pass custom `libphonenumber-js` metadata\r\n\t\t * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n\t\t */\r\n\t\tmetadata : metadataPropType.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A long time ago a person requested an `onCountryChange(country)` event listener.\r\n\t\t * No valid reason was given other than compliance with some legacy code\r\n\t\t * which stored both phone number and country in a database.\r\n\t\t * @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\r\n\t\t */\r\n\t\tonCountryChange : PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * Disables only the phone number `<input/>`.\r\n\t\t *\r\n\t\t * Some users choose to implement a digital keyboard component for phone number input.\r\n\t\t * In such cases the phone number input field must be disabled in order for the default system keyboard to not show up on focus.\r\n\t\t * At the same time, country select should not be disabled in order for the user to be able to choose their country.\r\n\t\t */\r\n\t\t// (is `false` by default)\r\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/215\r\n\t\tdisablePhoneInput : PropTypes.bool.isRequired\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\t/**\r\n\t\t * Not disabled.\r\n\t\t */\r\n\t\tdisabled: false,\r\n\t\tdisablePhoneInput: false,\r\n\r\n\t\t/**\r\n\t\t * Show `error` (if passed).\r\n\t\t * @deprecated\r\n\t\t */\r\n\t\tindicateInvalid : true,\r\n\r\n\t\t/**\r\n\t\t * Remember (and autofill) the value as a phone number.\r\n\t\t */\r\n\t\tautoComplete: 'tel',\r\n\r\n\t\t/**\r\n\t\t * Flag icon component.\r\n\t\t */\r\n\t\tflagComponent: FlagComponent,\r\n\r\n\t\t/**\r\n\t\t * By default use icons from `flag-icon-css` github repo.\r\n\t\t */\r\n\t\tflagsPath: 'https://lipis.github.io/flag-icon-css/flags/4x3/',\r\n\r\n\t\t/**\r\n\t\t * Default \"International\" country `<select/>` option icon (globe).\r\n\t\t */\r\n\t\t // internationalIcon: InternationalIcon,\r\n\r\n\t\t/**\r\n\t\t * Phone number `<input/>` component.\r\n\t\t */\r\n\t\tinputComponent: InputBasic,\r\n\r\n\t\t/**\r\n\t\t * Show country `<select/>`.\r\n\t\t */\r\n\t\tshowCountrySelect: true,\r\n\r\n\t\t/**\r\n\t\t * Don't convert the initially passed phone number `value`\r\n\t\t * to a national phone number for its country.\r\n\t\t * The reason is that the newer generation grows up when\r\n\t\t * there are no stationary phones and therefore everyone inputs\r\n\t\t * phone numbers with a `+` in their smartphones\r\n\t\t * so phone numbers written in international form\r\n\t\t * are gradually being considered more natural than local ones.\r\n\t\t */\r\n\t\tdisplayInitialValueAsLocalNumber: false,\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to use `inputComponent={InputBasic}`\r\n\t\t * instead of `input-format`'s `<ReactInput/>`.\r\n\t\t * Is `false` by default.\r\n\t\t */\r\n\t\t// smartCaret : false,\r\n\r\n\t\t/**\r\n\t\t * Whether to add the \"International\" option\r\n\t\t * to the list of countries.\r\n\t\t */\r\n\t\tinternational : true,\r\n\r\n\t\t/**\r\n\t\t * If set to `true` the phone number input will get trimmed\r\n\t\t * if it exceeds the maximum length for the country.\r\n\t\t */\r\n\t\tlimitMaxLength : false\r\n\t}\r\n\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props)\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tvalue,\r\n\t\t\tcountry,\r\n\t\t\tcountries,\r\n\t\t\tcountryOptions,\r\n\t\t\tlabels,\r\n\t\t\tinternational,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tif (country) {\r\n\t\t\tvalidateCountry(country, metadata)\r\n\t\t}\r\n\t\tif (countries) {\r\n\t\t\tvalidateCountries(countries, metadata)\r\n\t\t}\r\n\t\tif (countryOptions) {\r\n\t\t\tvalidateCountryOptions(countryOptions, metadata)\r\n\t\t}\r\n\r\n\t\tconst phoneNumber = parsePhoneNumber(value, metadata)\r\n\r\n\t\tconst pre_selected_country = getPreSelectedCountry\r\n\t\t(\r\n\t\t\tphoneNumber,\r\n\t\t\tcountry,\r\n\t\t\tcountries || getCountryCodes(labels).filter(_ => _ === 'ZZ' || metadata.countries[_]),\r\n\t\t\tinternational,\r\n\t\t\tmetadata\r\n\t\t)\r\n\r\n\t\tthis.state =\r\n\t\t{\r\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\r\n\t\t\tprops : this.props,\r\n\r\n\t\t\t// The country selected.\r\n\t\t\tcountry : pre_selected_country,\r\n\r\n\t\t\t// Generate country `<select/>` options.\r\n\t\t\tcountry_select_options : generate_country_select_options(this.props),\r\n\r\n\t\t\t// `parsed_input` state property holds non-formatted user's input.\r\n\t\t\t// The reason is that there's no way of finding out\r\n\t\t\t// in which form should `value` be displayed: international or national.\r\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\r\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\r\n\t\t\t// Hence storing just `value`is not sufficient for correct formatting.\r\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\r\n\t\t\t// then value is `+78005553535` and `parsed_input` is `88005553535`\r\n\t\t\t// and if a user entered `+7 800 555 35 35`\r\n\t\t\t// then value is `+78005553535` and `parsed_input` is `+78005553535`.\r\n\t\t\tparsed_input : generateParsedInput(value, phoneNumber, this.props),\r\n\r\n\t\t\t// `value` property is duplicated in state.\r\n\t\t\t// The reason is that `getDerivedStateFromProps()`\r\n\t\t\t// needs this `value` to compare to the new `value` property\r\n\t\t\t// to find out if `parsed_input` needs updating:\r\n\t\t\t// If the `value` property was changed externally\r\n\t\t\t// then it won't be equal to `state.value`\r\n\t\t\t// in which case `parsed_input` and `country` should be updated.\r\n\t\t\tvalue\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst { country, onCountryChange } = this.props\r\n\t\tconst { country: selectedCountry } = this.state\r\n\r\n\t\tif (onCountryChange && selectedCountry !== country) {\r\n\t\t\tonCountryChange(selectedCountry)\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tconst {\r\n\t\t\tcountry,\r\n\t\t\tcountries,\r\n\t\t\tcountryOptions,\r\n\t\t\tonCountryChange,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\tif (country && country !== prevProps.country) {\r\n\t\t\tvalidateCountry(country, metadata)\r\n\t\t}\r\n\t\tif (countries && countries !== prevProps.countries) {\r\n\t\t\tvalidateCountries(countries, metadata)\r\n\t\t}\r\n\t\tif (countryOptions && countryOptions !== prevProps.countryOptions) {\r\n\t\t\tvalidateCountryOptions(countryOptions, metadata)\r\n\t\t}\r\n\r\n\t\tif (onCountryChange && this.state.country !== prevState.country) {\r\n\t\t\tonCountryChange(this.state.country)\r\n\t\t}\r\n\t}\r\n\r\n\t// Country `<select/>` `onChange` handler.\r\n\tonCountryChange = (new_country) =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tmetadata,\r\n\t\t\tonChange,\r\n\t\t\tdisplayInitialValueAsLocalNumber\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tparsed_input : old_parsed_input,\r\n\t\t\tcountry      : old_country\r\n\t\t}\r\n\t\t= this.state\r\n\r\n\t\t// After the new `country` has been selected,\r\n\t\t// if the phone number `<input/>` holds any digits\r\n\t\t// then migrate those digits for the new `country`.\r\n\t\tconst new_parsed_input = migrateParsedInputForNewCountry\r\n\t\t(\r\n\t\t\told_parsed_input,\r\n\t\t\told_country,\r\n\t\t\tnew_country,\r\n\t\t\tmetadata,\r\n\t\t\tdisplayInitialValueAsLocalNumber\r\n\t\t)\r\n\r\n\t\tconst new_value = e164(new_parsed_input, new_country, metadata)\r\n\r\n\t\t// Focus phone number `<input/>` upon country selection.\r\n\t\tthis.focus()\r\n\r\n\t\t// If the user has already manually selected a country\r\n\t\t// then don't override that already selected country\r\n\t\t// if the default `country` property changes.\r\n\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\r\n\t\tthis.setState\r\n\t\t({\r\n\t\t\tcountry : new_country,\r\n\t\t\thasUserSelectedACountry : true,\r\n\t\t\tparsed_input : new_parsed_input,\r\n\t\t\tvalue : new_value\r\n\t\t},\r\n\t\t() =>\r\n\t\t{\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\tonChange(new_value)\r\n\t\t})\r\n\t}\r\n\r\n\t// Phone number `<input/>` `onKeyDown` handler.\r\n\tonPhoneNumberKeyDown = (event) =>\r\n\t{\r\n\t\tconst { onKeyDown } = this.props\r\n\r\n\t\t// Actually \"Down arrow\" key is used for showing \"autocomplete\" (\"autofill\") options.\r\n\t\t// (e.g. previously entered phone numbers for `autoComplete=\"tel\"`)\r\n\t\t// so can't hijack \"Down arrow\" keypress here.\r\n\t\t// // Expand country `<select/>`` on \"Down arrow\" key press.\r\n\t\t// if (event.keyCode === 40) {\r\n\t\t// \tthis.country_select.toggle()\r\n\t\t// }\r\n\r\n\t\tif (onKeyDown) {\r\n\t\t\tonKeyDown(event)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * `<input/>` `onChange()` handler.\r\n\t * Updates `value` property accordingly (so that they are kept in sync).\r\n\t * @param {string?} input — Either a parsed phone number or an empty string. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t */\r\n\tonChange = (_input) =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tonChange,\r\n\t\t\tcountries,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tinput,\r\n\t\t\tcountry,\r\n\t\t\tvalue\r\n\t\t}\r\n\t\t= parseInput\r\n\t\t(\r\n\t\t\t_input,\r\n\t\t\tthis.state.country,\r\n\t\t\tcountries,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tmetadata\r\n\t\t)\r\n\r\n\t\tthis.setState\r\n\t\t({\r\n\t\t\tparsed_input: input,\r\n\t\t\tvalue,\r\n\t\t\tcountry\r\n\t\t},\r\n\t\t// Update the new `value` property.\r\n\t\t// Doing it after the `state` has been updated\r\n\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t() => onChange(value))\r\n\t}\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onFocus = () => this.setState({ isFocused: true })\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onBlur = () => this.setState({ isFocused: false })\r\n\r\n\tonFocus = (event) =>\r\n\t{\r\n\t\tconst { onFocus } = this.props\r\n\r\n\t\tthis._onFocus()\r\n\r\n\t\tif (onFocus) {\r\n\t\t\tonFocus(event)\r\n\t\t}\r\n\t}\r\n\r\n\t// This `onBlur` interceptor is a workaround for `redux-form`\r\n\t// so that it gets the up-to-date `value` in its `onBlur` handler.\r\n\t// Without this fix it just gets the actual (raw) input field textual value.\r\n\t// E.g. `+7 800 555 35 35` instead of `+78005553535`.\r\n\t//\r\n\t// A developer is not supposed to pass this `onBlur` property manually.\r\n\t// Instead, `redux-form` passes `onBlur` to this component automatically\r\n\t// and this component patches that `onBlur` handler (a hacky way but works).\r\n\t//\r\n\tonBlur = (event) =>\r\n\t{\r\n\t\tconst { onBlur } = this.props\r\n\t\tconst { value } = this.state\r\n\r\n\t\tthis._onBlur()\r\n\r\n\t\tif (!onBlur) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// `event` is React's `SyntheticEvent`.\r\n\t\t// Its `.value` is read-only therefore cloning it.\r\n\t\tconst _event =\r\n\t\t{\r\n\t\t\t...event,\r\n\t\t\ttarget:\r\n\t\t\t{\r\n\t\t\t\t...event.target,\r\n\t\t\t\tvalue\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// For `redux-form` event detection.\r\n\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\r\n\t\t_event.stopPropagation = event.stopPropagation\r\n\t\t_event.preventDefault  = event.preventDefault\r\n\r\n\t\treturn onBlur(_event)\r\n\t}\r\n\r\n\t// When country `<select/>` is toggled.\r\n\thidePhoneInputField = (hide) =>\r\n\t{\r\n\t\tthis.setState({\r\n\t\t\thidePhoneInputField: hide\r\n\t\t})\r\n\t}\r\n\r\n\t// Can be called externally.\r\n\tfocus = () => this.number_input.focus()\r\n\r\n\tstoreCountrySelectInstance = _ => this.country_select = _\r\n\r\n\tstorePhoneNumberInputInstance = _ => this.number_input = _\r\n\r\n\t// `state` holds previous props as `props`, and also:\r\n\t// * `country` — The currently selected country, e.g. `\"RU\"`.\r\n\t// * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\r\n\t// * `parsed_input` — The parsed `<input/>` value, e.g. `8005553535`.\r\n\t// (and a couple of other less significant properties)\r\n\tstatic getDerivedStateFromProps(props, state)\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tcountry,\r\n\t\t\thasUserSelectedACountry,\r\n\t\t\tvalue,\r\n\t\t\tprops:\r\n\t\t\t{\r\n\t\t\t\tcountry : old_default_country,\r\n\t\t\t\tvalue   : old_value\r\n\t\t\t}\r\n\t\t}\r\n\t\t= state\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tmetadata,\r\n\t\t\tcountries,\r\n\t\t\tcountry : new_default_country,\r\n\t\t\tvalue   : new_value\r\n\t\t}\r\n\t\t= props\r\n\r\n\t\tconst new_state = {\r\n\t\t\t// Emulate `prevProps` via `state.props`.\r\n\t\t\tprops,\r\n\t\t\t// If the user has already manually selected a country\r\n\t\t\t// then don't override that already selected country\r\n\t\t\t// if the default `country` property changes.\r\n\t\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\t\t\thasUserSelectedACountry\r\n\t\t}\r\n\r\n\t\t// If `countries` or `labels` or `international` changed\r\n\t\t// then re-generate country `<select/>` options.\r\n\t\tif (props.countries !== state.props.countries ||\r\n\t\t\tprops.labels !== state.props.labels ||\r\n\t\t\tprops.international !== state.props.international)\r\n\t\t{\r\n\t\t\tnew_state.country_select_options = generate_country_select_options(props)\r\n\t\t}\r\n\r\n\t\t// If the default country changed.\r\n\t\t// (e.g. in case of ajax GeoIP detection after page loaded)\r\n\t\t// then select it but only if the user hasn't already manually\r\n\t\t// selected a country and no phone number has been entered so far.\r\n\t\t// Because if the user has already started inputting a phone number\r\n\t\t// then he's okay with no country being selected at all (\"International\")\r\n\t\t// and doesn't want to be disturbed, doesn't want his input to be screwed, etc.\r\n\t\tif (new_default_country !== old_default_country &&\r\n\t\t\t!hasUserSelectedACountry && !value && !new_value)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\t...new_state,\r\n\t\t\t\tcountry : new_default_country\r\n\t\t\t\t// `value` is `undefined`.\r\n\t\t\t\t// `parsed_input` is `undefined` because `value` is `undefined`.\r\n\t\t\t}\r\n\t\t}\r\n\t\t// If a new `value` is set externally.\r\n\t\t// (e.g. as a result of an ajax API request\r\n\t\t//  to get user's phone after page loaded)\r\n\t\t// The first part — `new_value !== old_value` —\r\n\t\t// is basically `props.value !== prevProps.value`\r\n\t\t// so it means \"if value property was changed externally\".\r\n\t\t// The second part — `new_value !== value` —\r\n\t\t// is for ignoring the `getDerivedStateFromProps()` call\r\n\t\t// which happens in `this.onChange()` right after `this.setState()`.\r\n\t\t// If this `getDerivedStateFromProps()` call isn't ignored\r\n\t\t// then the country flag would reset on each input.\r\n\t\telse if (new_value !== old_value && new_value !== value)\r\n\t\t{\r\n\t\t\tconst phoneNumber = parsePhoneNumber(new_value, metadata)\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...new_state,\r\n\t\t\t\tparsed_input : generateParsedInput(new_value, phoneNumber, props),\r\n\t\t\t\tvalue : new_value,\r\n\t\t\t\tcountry : new_value ? (phoneNumber && (!countries || countries.indexOf(phoneNumber.country) >= 0) ? phoneNumber.country : undefined) : country\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// `country` didn't change.\r\n\t\t// `value` didn't change.\r\n\t\t// `parsed_input` didn't change, because `value` didn't change.\r\n\t\t//\r\n\t\t// Maybe `new_state.country_select_options` changed.\r\n\t\t// In any case, update `prevProps`.\r\n\t\treturn new_state\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tname,\r\n\t\t\tdisabled,\r\n\t\t\tdisablePhoneInput,\r\n\t\t\tautoComplete,\r\n\t\t\tcountrySelectTabIndex,\r\n\t\t\tshowCountrySelect,\r\n\t\t\tstyle,\r\n\t\t\tclassName,\r\n\t\t\tinputClassName,\r\n\t\t\tgetInputClassName,\r\n\t\t\tcountrySelectProperties,\r\n\r\n\t\t\terror,\r\n\t\t\tindicateInvalid,\r\n\r\n\t\t\tcountrySelectComponent : CountrySelectComponent,\r\n\t\t\tinputComponent : InputComponent,\r\n\t\t\t// smartCaret,\r\n\t\t\text,\r\n\r\n\t\t\t// Extract `phoneNumberInputProps` via \"object rest spread\":\r\n\t\t\tcountries,\r\n\t\t\tcountryOptions,\r\n\t\t\tlabels,\r\n\t\t\tcountry : _,\r\n\t\t\tflags,\r\n\t\t\tflagComponent,\r\n\t\t\tflagsPath,\r\n\t\t\tinternational,\r\n\t\t\tinternationalIcon,\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tonCountryChange,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tmetadata,\r\n\t\t\t...phoneNumberInputProps\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tcountry,\r\n\t\t\thidePhoneInputField,\r\n\t\t\tcountry_select_options,\r\n\t\t\tparsed_input,\r\n\t\t\tisFocused\r\n\t\t}\r\n\t\t= this.state\r\n\r\n\t\t// const InputComponent = inputComponent || (smartCaret ? InputSmart : InputBasic)\r\n\r\n\t\t// Extract `countrySelectProperties` from `this.props`\r\n\t\t// also removing them from `phoneNumberInputProps`.\r\n\t\tconst _countrySelectProps = {}\r\n\t\tif (countrySelectProperties)\r\n\t\t{\r\n\t\t\tfor (const key in countrySelectProperties)\r\n\t\t\t{\r\n\t\t\t\tif (this.props.hasOwnProperty(key))\r\n\t\t\t\t{\r\n\t\t\t\t\t_countrySelectProps[countrySelectProperties[key]] = this.props[key]\r\n\t\t\t\t\tdelete phoneNumberInputProps[key]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tstyle={ style }\r\n\t\t\t\tclassName={ classNames('react-phone-number-input',\r\n\t\t\t\t{\r\n\t\t\t\t\t'react-phone-number-input--focus'   : isFocused,\r\n\t\t\t\t\t'react-phone-number-input--invalid' : error && indicateInvalid\r\n\t\t\t\t},\r\n\t\t\t\tclassName) }>\r\n\r\n\t\t\t\t{/* Country `<select/>` and phone number `<input/>` */}\r\n\t\t\t\t<div className=\"react-phone-number-input__row\">\r\n\r\n\t\t\t\t\t{/* Country `<select/>` */}\r\n\t\t\t\t\t{ showCountrySelect &&\r\n\t\t\t\t\t\t<CountrySelectComponent\r\n\t\t\t\t\t\t\t{..._countrySelectProps}\r\n\t\t\t\t\t\t\tref={ this.storeCountrySelectInstance }\r\n\t\t\t\t\t\t\tname={ name ? `${name}__country` : undefined }\r\n\t\t\t\t\t\t\tvalue={ country }\r\n\t\t\t\t\t\t\toptions={ country_select_options }\r\n\t\t\t\t\t\t\tonChange={ this.onCountryChange }\r\n\t\t\t\t\t\t\tonFocus={ this._onFocus }\r\n\t\t\t\t\t\t\tonBlur={ this._onBlur }\r\n\t\t\t\t\t\t\tdisabled={ disabled }\r\n\t\t\t\t\t\t\ttabIndex={ countrySelectTabIndex }\r\n\t\t\t\t\t\t\thidePhoneInputField={ this.hidePhoneInputField }\r\n\t\t\t\t\t\t\tfocusPhoneInputField={ this.focus }\r\n\t\t\t\t\t\t\taria-label={ labels.country }\r\n\t\t\t\t\t\t\tclassName=\"react-phone-number-input__country\"/>\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t{/* Phone number `<input/>` */}\r\n\t\t\t\t\t{ !hidePhoneInputField &&\r\n\t\t\t\t\t\t<InputComponent\r\n\t\t\t\t\t\t\ttype=\"tel\"\r\n\t\t\t\t\t\t\tname={ name }\r\n\t\t\t\t\t\t\t{ ...phoneNumberInputProps }\r\n\t\t\t\t\t\t\tref={ this.storePhoneNumberInputInstance }\r\n\t\t\t\t\t\t\tmetadata={ metadata }\r\n\t\t\t\t\t\t\tcountry={ country }\r\n\t\t\t\t\t\t\tvalue={ parsed_input || '' }\r\n\t\t\t\t\t\t\tonChange={ this.onChange }\r\n\t\t\t\t\t\t\tonFocus={ this.onFocus }\r\n\t\t\t\t\t\t\tonBlur={ this.onBlur }\r\n\t\t\t\t\t\t\tonKeyDown={ this.onPhoneNumberKeyDown }\r\n\t\t\t\t\t\t\tdisabled={ disabled || disablePhoneInput }\r\n\t\t\t\t\t\t\tautoComplete={ autoComplete }\r\n\t\t\t\t\t\t\tclassName={ classNames\r\n\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t'react-phone-number-input__input',\r\n\t\t\t\t\t\t\t\t'react-phone-number-input__phone',\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__input--disabled' : disabled || disablePhoneInput,\r\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__input--invalid'  : error && indicateInvalid\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tinputClassName,\r\n\t\t\t\t\t\t\t\tgetInputClassName && getInputClassName({\r\n\t\t\t\t\t\t\t\t\tdisabled: disabled || disablePhoneInput,\r\n\t\t\t\t\t\t\t\t\tinvalid: error && indicateInvalid\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t) }/>\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t{/* Phone extension `<input/>` */}\r\n\t\t\t\t\t{ ext && !hidePhoneInputField &&\r\n\t\t\t\t\t\t<label className=\"react-phone-number-input__ext\">\r\n\t\t\t\t\t\t\t{labels.ext}\r\n\t\t\t\t\t\t\t{React.cloneElement(ext,\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tonChange : ext.props.onChange ? (event) => ext.props.onChange(parseExtDigits(event)) : undefined,\r\n\t\t\t\t\t\t\t\tonFocus : this._onFocus,\r\n\t\t\t\t\t\t\t\tonBlur : this._onBlur,\r\n\t\t\t\t\t\t\t\tclassName : classNames\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__input',\r\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__ext-input',\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t'react-phone-number-input__input--disabled' : disabled || disablePhoneInput,\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tinputClassName,\r\n\t\t\t\t\t\t\t\t\tgetInputClassName && getInputClassName({\r\n\t\t\t\t\t\t\t\t\t\tdisabled: disabled || disablePhoneInput\r\n\t\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\t\text.props.className\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* Error message */}\r\n\t\t\t\t{ error && indicateInvalid &&\r\n\t\t\t\t\t<div className=\"react-phone-number-input__error\">\r\n\t\t\t\t\t\t{ error }\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n// Generates country `<select/>` options.\r\nfunction generate_country_select_options(props)\r\n{\r\n\tconst\r\n\t{\r\n\t\tcountries,\r\n\t\tlabels,\r\n\t\tinternational,\r\n\t\tcountryOptions,\r\n\t\tmetadata\r\n\t}\r\n\t= props\r\n\r\n\tconst CountrySelectOptionIcon = createCountrySelectOptionIconComponent(props)\r\n\r\n\treturn transformCountryOptions(getCountrySelectOptions\r\n\t(\r\n\t\tcountries || getCountryCodes(labels).filter(_ => _ === 'ZZ' || metadata.countries[_]),\r\n\t\tlabels,\r\n\t\tinternational\r\n\t)\r\n\t.map(({ value, label }) =>\r\n\t({\r\n\t\tvalue,\r\n\t\tlabel,\r\n\t\ticon : CountrySelectOptionIcon\r\n\t})),\r\n\tcountryOptions)\r\n}\r\n\r\nfunction createCountrySelectOptionIconComponent(props)\r\n{\r\n\tconst\r\n\t{\r\n\t\tflags,\r\n\t\tflagsPath,\r\n\t\tflagComponent : FlagComponent,\r\n\t\tinternationalIcon : InternationalIcon\r\n\t}\r\n\t= props\r\n\r\n\treturn ({ value }) => (\r\n\t\t<div\r\n\t\t\tclassName={classNames('react-phone-number-input__icon',\r\n\t\t\t{\r\n\t\t\t\t'react-phone-number-input__icon--international': value === undefined\r\n\t\t\t})}>\r\n\t\t\t{\r\n\t\t\t\tvalue\r\n\t\t\t\t?\r\n\t\t\t\t<FlagComponent\r\n\t\t\t\t\tcountry={value}\r\n\t\t\t\t\tflags={flags}\r\n\t\t\t\t\tflagsPath={flagsPath}/>\r\n\t\t\t\t:\r\n\t\t\t\t<InternationalIcon/>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n// Can move some country `<select/>` options\r\n// to the top of the list, for example.\r\n// See `countryOptions` property.\r\nfunction transformCountryOptions(options, transform)\r\n{\r\n\tif (!transform) {\r\n\t\treturn options\r\n\t}\r\n\r\n\tconst optionsOnTop = []\r\n\tconst optionsOnBottom = []\r\n\tlet appendTo = optionsOnTop\r\n\r\n\tfor (const element of transform)\r\n\t{\r\n\t\tif (element === '|')\r\n\t\t{\r\n\t\t\tappendTo.push({ divider: true })\r\n\t\t}\r\n\t\telse if (element === '...' || element === '…')\r\n\t\t{\r\n\t\t\tappendTo = optionsOnBottom\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// Find the position of the option.\r\n\t\t\tconst index = options.indexOf(options.filter(option => option.value === element)[0])\r\n\t\t\t// Get the option.\r\n\t\t\tconst option = options[index]\r\n\t\t\t// Remove the option from its default position.\r\n\t\t\toptions.splice(index, 1)\r\n\t\t\t// Add the option on top.\r\n\t\t\tappendTo.push(option)\r\n\t\t}\r\n\t}\r\n\r\n\treturn optionsOnTop.concat(options).concat(optionsOnBottom)\r\n}\r\n\r\nfunction generateParsedInput(value, phoneNumber, props)\r\n{\r\n\tconst { displayInitialValueAsLocalNumber } = props\r\n\r\n\t// If the `value` (E.164 phone number)\r\n\t// belongs to the currently selected country\r\n\t// and `displayInitialValueAsLocalNumber` property is `true`\r\n\t// then convert `value` (E.164 phone number)\r\n\t// to a local phone number digits.\r\n\t// E.g. '+78005553535' -> '88005553535'.\r\n\tif (displayInitialValueAsLocalNumber && phoneNumber && phoneNumber.country) {\r\n\t\treturn generateNationalNumberDigits(phoneNumber)\r\n\t}\r\n\r\n\treturn value\r\n}\r\n\r\nfunction validateCountryOptions(countries, metadata) {\r\n\tfor (const country of countries) {\r\n\t\tif (country && country !== '|' && country !== '...' && country !== '…') {\r\n\t\t\tif (!metadata.countries[country]) {\r\n\t\t\t\tthrowCountryNotFound(country)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction validateCountries(countries, metadata) {\r\n\tfor (const country of countries) {\r\n\t\tif (!metadata.countries[country]) {\r\n\t\t\tthrowCountryNotFound(country)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction validateCountry(country, metadata) {\r\n\tif (!metadata.countries[country]) {\r\n\t\tthrowCountryNotFound(country)\r\n\t}\r\n}\r\n\r\nfunction throwCountryNotFound(country) {\r\n\tthrow new Error(`Country not found: ${country}`)\r\n}\r\n\r\nfunction parseExtDigits(event) {\r\n\tif (event) {\r\n\t\tif (typeof event === 'string') {\r\n\t\t\tevent = parseDigits(event)\r\n\t\t} else if (event.target && event.target.value) {\r\n\t\t\tevent.target.value = parseDigits(event.target.value)\r\n\t\t}\r\n\t}\r\n\treturn event\r\n}"]}